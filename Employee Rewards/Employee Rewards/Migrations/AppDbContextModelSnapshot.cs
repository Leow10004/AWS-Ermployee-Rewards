// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyProject.Data;

#nullable disable

namespace Employee_Rewards.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyProject.Models.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminID"), 1L, 1);

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.HasKey("AdminID");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("MyProject.Models.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"), 1L, 1);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("MyProject.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"), 1L, 1);

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Access")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AdminID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EthnicityID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerID")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageRoot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.HasIndex("AdminID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("EthnicityID");

                    b.HasIndex("ManagerID");

                    b.HasIndex("RegionID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("MyProject.Models.Ethnicity", b =>
                {
                    b.Property<int>("EthnicityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EthnicityID"), 1L, 1);

                    b.Property<string>("EthnicityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EthnicityID");

                    b.ToTable("Ethnicities");
                });

            modelBuilder.Entity("MyProject.Models.Manager", b =>
                {
                    b.Property<int>("ManagerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerID"), 1L, 1);

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID1")
                        .HasColumnType("int");

                    b.HasKey("ManagerID");

                    b.HasIndex("EmployeeID1");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("MyProject.Models.Password", b =>
                {
                    b.Property<int>("PasswordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PasswordID"), 1L, 1);

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PasswordID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("MyProject.Models.Region", b =>
                {
                    b.Property<int>("RegionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionID"), 1L, 1);

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionID");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("MyProject.Models.Reward", b =>
                {
                    b.Property<int>("RewardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RewardID"), 1L, 1);

                    b.Property<DateTime>("DateAwarded")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("IssuerID")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RewardDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RewardID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("IssuerID");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("MyProject.Models.RewardReason", b =>
                {
                    b.Property<int>("ReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReasonID"), 1L, 1);

                    b.Property<string>("ReasonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReasonID");

                    b.ToTable("RewardReasons");
                });

            modelBuilder.Entity("MyProject.Models.Admin", b =>
                {
                    b.HasOne("MyProject.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyProject.Models.Employee", b =>
                {
                    b.HasOne("MyProject.Models.Admin", "Admin")
                        .WithMany("AdministeredEmployees")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MyProject.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyProject.Models.Ethnicity", "Ethnicity")
                        .WithMany("Employees")
                        .HasForeignKey("EthnicityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyProject.Models.Manager", "Manager")
                        .WithMany("ManagedEmployees")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MyProject.Models.Region", "Region")
                        .WithMany("Employees")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Department");

                    b.Navigation("Ethnicity");

                    b.Navigation("Manager");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MyProject.Models.Manager", b =>
                {
                    b.HasOne("MyProject.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyProject.Models.Password", b =>
                {
                    b.HasOne("MyProject.Models.Employee", "Employee")
                        .WithMany("Passwords")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyProject.Models.Reward", b =>
                {
                    b.HasOne("MyProject.Models.Employee", "Employee")
                        .WithMany("Rewards")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyProject.Models.Employee", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Issuer");
                });

            modelBuilder.Entity("MyProject.Models.Admin", b =>
                {
                    b.Navigation("AdministeredEmployees");
                });

            modelBuilder.Entity("MyProject.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MyProject.Models.Employee", b =>
                {
                    b.Navigation("Passwords");

                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("MyProject.Models.Ethnicity", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MyProject.Models.Manager", b =>
                {
                    b.Navigation("ManagedEmployees");
                });

            modelBuilder.Entity("MyProject.Models.Region", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
